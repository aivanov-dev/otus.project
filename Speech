Задачи сохранения ачивок и прогресса студента наше приложение выполняет в очередях. Это позволяет улучшить
производительность так как данный функционал реализовывается в отдельных инстансах приложения. Для этого 
мы выбрали rabbitmq. Предварительно создается exchange типа fanout и две очереди: achievements и experience. При сохранении
результатов в эндпоинте POST /api/results создаётся job и exchange маршрутизирует его в обе очереди, где очередь
achievement рассчитывает получил ли студент ачивку, а очередь experience распределяет баллы за задание по навыкам.

Пожалуйста, следующий слайд.

Мы хотели создать возможность создавать правила ачивок без участия программиста. Для этого был использован 
компонент symfony/expression-language. Этот компонент используется в ядре symfony, например, для расчёта выражений в конфигурационных yml файлах. Компонент может обезопасить от инъекций так как необходимо объявлять
какая переменная будет доступна в выражении. Выражения пишутся так, чтобы возвращать только true либо false, также с помощью этих выражений можно вызывать методы объектов. Сервис UserProgressService берёт из базы предварительно сохранённые там правила ачивок, а также получает сохранённую модель taskResult и вычисляет каждый expression, передавая в expression модель taskResult.
Если текущее выражение возвращает true, то пользователю записывается соответствующая ачивка.

Пожалуйста, следующий слайд.

Если job пришёл от очереди experience, то рассчитывается опыт студента полученный за выполненное задание.
Через известную нам модель TaskResult мы получает доли навыков и вычисляем сколько баллов нужно записать 
пользователю за каждый навык, записывая результат в таблицу experiences, которая связывает пользователя и его заработанный навык.

У меня всё, спасибо за внимание.

user_id 33
task_id 30
exercise_group_id 66
